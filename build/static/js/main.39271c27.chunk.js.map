{"version":3,"sources":["assets/default.svg","Navbar.js","TitleForm.js","ItemDetails.js","Lane.js","AddLaneButton.js","SwimLanes.js","utils/uuid.js","seed.js","hooks/useBoardState.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","id","src","logo","alt","height","TitleForm","title","editLane","toggleEdit","laneId","addLane","editTitle","useState","value","setValue","handleCancel","onSubmit","e","preventDefault","type","autoFocus","onBlur","onChange","target","placeholder","ItemDetails","toggleItemDetails","lanes","lane","item","addItem","removeItem","editItem","moveItem","itemName","name","itemDescription","description","emptyFields","setEmptyField","handleChange","onClick","stopPropagation","icon","faTag","htmlFor","faFileAlt","cols","rows","faColumns","map","l","key","faCheckSquare","disabled","Lane","removeLane","items","isTitleEditing","toggleTitleEditing","isItemFormOpen","toggleItemFormOpen","selectedItem","setSelectedItem","tasks","index","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","faTrash","droppableId","droppableProps","faPlus","AddLaneButton","faPlusCircle","SwimLanes","isAddTitleEditing","setIsAddTitleEditing","uuid","replace","c","r","Math","random","toString","board","kanban","setKanban","updateLanes","updatedLanes","editBoardName","newTitle","filter","newAttribute","newItem","itemId","oldLane","find","filteredItems","newItems","i","newLaneId","itemToMove","moveItemToPos","sourceLaneId","destLaneId","destItemIndex","sourceColumn","sourceColumnIdx","findIndex","destinationColumn","destinationColumnIdx","movedItem","destCol","updatedLane","slice","newSourceCol","newDestCol","Board","isEditing","setIsEditing","useBoardState","onDragEnd","result","destination","source","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39271c27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.1ed6a2af.svg\";","import React from \"react\";\r\nimport \"./Navbar.css\";\r\nimport logo from \"./assets/default.svg\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"Navbar\">\r\n      <ul className=\"Navbar-menu\">\r\n        <li id=\"logo\">\r\n          <button>\r\n            <img src={logo} alt=\"logo\" height=\"30\" />\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button>Menu1</button>\r\n        </li>\r\n        <li>\r\n          <button>Menu2</button>\r\n        </li>\r\n      </ul>\r\n      <ul className=\"Navbar-menu\">\r\n        <li>\r\n          <button>Login</button>\r\n        </li>\r\n        <li>\r\n          <button>Register</button>\r\n        </li>\r\n        <li>\r\n          <button>Account</button>\r\n        </li>\r\n        <li>\r\n          <button>Logout</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TitleForm({\r\n  title,\r\n  editLane,\r\n  toggleEdit,\r\n  laneId,\r\n  addLane,\r\n  editTitle\r\n}) {\r\n  const [value, setValue] = useState(title || \"\");\r\n  const handleTitleEdit = e => {\r\n    e.preventDefault();\r\n    if (value !== \"\") {\r\n      if (laneId) {\r\n        editLane(laneId, { title: value });\r\n      } else if (addLane) {\r\n        addLane(value);\r\n      } else {\r\n        editTitle(value);\r\n      }\r\n      toggleEdit();\r\n    }\r\n    handleCancel();\r\n  };\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const handleCancel = () => {\r\n    if (!addLane) {\r\n      setValue(title);\r\n    }\r\n    toggleEdit();\r\n  };\r\n  return (\r\n    <form onSubmit={handleTitleEdit}>\r\n      <input\r\n        type=\"text\"\r\n        autoFocus\r\n        value={value}\r\n        onBlur={handleCancel}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter Title...\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TitleForm;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTag,\r\n  faFileAlt,\r\n  faColumns,\r\n  faCheckSquare\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction ItemDetails({\r\n  toggleItemDetails,\r\n  lanes,\r\n  lane,\r\n  item,\r\n  addItem,\r\n  removeItem,\r\n  editItem,\r\n  moveItem\r\n}) {\r\n  const handleClick = e => {\r\n    e.stopPropagation();\r\n  };\r\n  const [value, setValue] = useState({\r\n    itemName: item.name,\r\n    itemDescription: item.description,\r\n    laneId: lane.id\r\n  });\r\n  const [emptyFields, setEmptyField] = useState(\r\n    item.name === \"\" ? true : false\r\n  );\r\n  const handleChange = e => {\r\n    setEmptyField(!value.itemName || !value.itemDescription ? true : false);\r\n    setValue({\r\n      ...value,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (value.itemName && value.itemDescription) {\r\n      if (item.name === \"\") {\r\n        addItem(lane.id, value.itemName, value.itemDescription);\r\n      } else {\r\n        editItem(lane.id, item.id, {\r\n          name: value.itemName,\r\n          description: value.itemDescription\r\n        });\r\n      }\r\n      if (value.laneId !== lane.id) {\r\n        moveItem(lane.id, item.id, value.laneId);\r\n      }\r\n    }\r\n    toggleItemDetails();\r\n  };\r\n  const handleRemove = () => {\r\n    removeItem(lane.id, item.id);\r\n    toggleItemDetails();\r\n  };\r\n  return (\r\n    <div className=\"item-details\" onClick={toggleItemDetails}>\r\n      <div className=\"item-form-container\" onClick={handleClick}>\r\n        <h3>Task details</h3>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"label-logo\">\r\n            <span className=\"logo\">\r\n              <FontAwesomeIcon icon={faTag} />\r\n            </span>\r\n            <div className=\"label-input\">\r\n              <label htmlFor=\"itemName\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"itemName\"\r\n                name=\"itemName\"\r\n                value={value.itemName}\r\n                placeholder=\"Add Title...\"\r\n                autoFocus\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"label-logo\">\r\n            <span className=\"logo\">\r\n              <FontAwesomeIcon icon={faFileAlt} />\r\n            </span>\r\n            <div className=\"label-input\">\r\n              <label htmlFor=\"itemDescription\">\r\n                <span>Description</span>\r\n              </label>\r\n              <textarea\r\n                id=\"itemDescription\"\r\n                cols=\"30\"\r\n                rows=\"3\"\r\n                name=\"itemDescription\"\r\n                placeholder=\"Add Description...\"\r\n                onChange={handleChange}\r\n                value={value.itemDescription}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n          <div className=\"label-logo\">\r\n            <span className=\"logo\">\r\n              <FontAwesomeIcon icon={faColumns} />\r\n            </span>\r\n            <div className=\"label-input\">\r\n              <p>\r\n                Currently in Column:{\" \"}\r\n                <span className=\"current-lane\">{lane.title}</span>\r\n              </p>\r\n              <p>Move to Column: </p>\r\n              <p>\r\n                <select\r\n                  name=\"laneId\"\r\n                  id=\"laneTitle\"\r\n                  value={value.laneId}\r\n                  onChange={handleChange}\r\n                >\r\n                  {lanes.map(l => (\r\n                    <option key={l.id} value={l.id}>\r\n                      {l.title}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"label-logo\">\r\n            <span className=\"logo\">\r\n              <FontAwesomeIcon icon={faCheckSquare} />\r\n            </span>\r\n            <div className=\"buttons\">\r\n              <input type=\"submit\" value=\"Save values\" disabled={emptyFields} />\r\n              <input type=\"button\" value=\"Cancel\" onClick={toggleItemDetails} />\r\n              {item.name && (\r\n                <input\r\n                  type=\"button\"\r\n                  className=\"delete-button\"\r\n                  value=\"Delete\"\r\n                  onClick={handleRemove}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n          {emptyFields ? (\r\n            <div className=\"alert\">Title and Description must be filled!</div>\r\n          ) : (\r\n            <div className=\"alert\">&nbsp;</div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDetails;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport \"./Lane.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport TitleForm from \"./TitleForm\";\r\nimport ItemDetails from \"./ItemDetails\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nfunction Lane({\r\n  lanes,\r\n  lane,\r\n  addItem,\r\n  removeItem,\r\n  editItem,\r\n  removeLane,\r\n  editLane,\r\n  moveItem\r\n}) {\r\n  const { title, items } = lane;\r\n  const [isTitleEditing, toggleTitleEditing] = useState(false);\r\n  const [isItemFormOpen, toggleItemFormOpen] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState(\"\");\r\n\r\n  const toggleEdit = () => toggleTitleEditing(!isTitleEditing);\r\n  const handleAddItem = e => {\r\n    toggleItemDetails({ name: \"\", description: \"\" });\r\n  };\r\n  const handleRemoveLane = e => {\r\n    e.stopPropagation();\r\n    removeLane(lane.id);\r\n  };\r\n  const toggleItemDetails = item => {\r\n    setSelectedItem(selectedItem === \"\" ? item : \"\");\r\n    toggleItemFormOpen(!isItemFormOpen);\r\n  };\r\n  const tasks = items.map((item, index) => (\r\n    <Draggable draggableId={item.id} index={index} key={item.id}>\r\n      {provided => (\r\n        <div\r\n          className=\"task\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <span key={item.id} onClick={() => toggleItemDetails(item)}>\r\n            {item.name}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  ));\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"lane-container\">\r\n        <div className=\"Lane\">\r\n          {isTitleEditing ? (\r\n            <TitleForm\r\n              editLane={editLane}\r\n              toggleEdit={toggleEdit}\r\n              title={title}\r\n              laneId={lane.id}\r\n            />\r\n          ) : (\r\n            <h3 onClick={toggleEdit}>\r\n              <span>{title}</span>\r\n              <FontAwesomeIcon icon={faTrash} onClick={handleRemoveLane} />\r\n            </h3>\r\n          )}\r\n          <Droppable droppableId={lane.id}>\r\n            {provided => (\r\n              <div ref={provided.innerRef} {...provided.droppableProps}>\r\n                {tasks}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n          <span className=\"add-item task\" onClick={handleAddItem}>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n            <span className=\"add-item-text\">Add item</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      {isItemFormOpen && (\r\n        <ItemDetails\r\n          lanes={lanes}\r\n          lane={lane}\r\n          item={selectedItem}\r\n          toggleItemDetails={toggleItemDetails}\r\n          removeItem={removeItem}\r\n          editItem={editItem}\r\n          addItem={addItem}\r\n          moveItem={moveItem}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Lane;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction AddLaneButton({ toggleEdit }) {\r\n  return (\r\n    <div className=\"lane-container\">\r\n      <button className=\"AddLaneButton Lane empty\" onClick={toggleEdit}>\r\n        <h3>\r\n          <FontAwesomeIcon icon={faPlusCircle} />\r\n          <span>Add Lane</span>\r\n        </h3>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddLaneButton;\r\n","import React, { useState } from \"react\";\r\nimport Lane from \"./Lane\";\r\nimport \"./SwimLanes.css\";\r\nimport AddLaneButton from \"./AddLaneButton\";\r\nimport TitleForm from \"./TitleForm\";\r\n\r\nexport default function SwimLanes({\r\n  lanes,\r\n  addLane,\r\n  addItem,\r\n  removeItem,\r\n  editItem,\r\n  removeLane,\r\n  editLane,\r\n  moveItem\r\n}) {\r\n  const [isAddTitleEditing, setIsAddTitleEditing] = useState(false);\r\n  const toggleEdit = () => {\r\n    setIsAddTitleEditing(!isAddTitleEditing);\r\n  };\r\n  return (\r\n    <div className=\"SwimLanes\">\r\n      {lanes.map(lane => (\r\n        <Lane\r\n          lane={lane}\r\n          key={lane.id}\r\n          addItem={addItem}\r\n          removeLane={removeLane}\r\n          editLane={editLane}\r\n          lanes={lanes}\r\n          removeItem={removeItem}\r\n          editItem={editItem}\r\n          moveItem={moveItem}\r\n        />\r\n      ))}\r\n      {!isAddTitleEditing ? (\r\n        <AddLaneButton toggleEdit={toggleEdit} />\r\n      ) : (\r\n        <div className=\"lane-container\">\r\n          <div className=\"Lane\">\r\n            <TitleForm addLane={addLane} toggleEdit={toggleEdit} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export default function uuid() {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n","export const board = {\r\n  title: \"Main Board\",\r\n  lanes: [\r\n    {\r\n      id: \"lane-1\",\r\n      title: \"To do\",\r\n      items: [\r\n        {\r\n          id: \"task-1\",\r\n          name: \"drag and drop\",\r\n          description: \"implement drag and drop for tasks\"\r\n        },\r\n        {\r\n          id: \"task-2\",\r\n          name: \"add items\",\r\n          description: \"implement add item function\"\r\n        },\r\n        {\r\n          id: \"task-3\",\r\n          name: \"implement add lane function\",\r\n          description: \"implement add lane function\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"lane-2\",\r\n      title: \"in progress\",\r\n      items: [\r\n        { id: \"task-4\", name: \"Seed file\", description: \"create seed file\" },\r\n        { id: \"task-5\", name: \"state\", description: \"add state to component\" }\r\n      ]\r\n    },\r\n    {\r\n      id: \"lane-3\",\r\n      title: \"done\",\r\n      items: [\r\n        { id: \"task-6\", name: \"design\", description: \"design board\" },\r\n        { id: \"task-7\", name: \"navbar\", description: \"create navbar\" }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n","import { useState } from \"react\";\r\nimport uuid from \"../utils/uuid\";\r\nimport { board } from \"../seed\";\r\n\r\nexport default () => {\r\n  const [kanban, setKanban] = useState(board);\r\n  const updateLanes = updatedLanes =>\r\n    setKanban({ ...kanban, lanes: updatedLanes });\r\n  const { lanes } = kanban;\r\n  return {\r\n    kanban,\r\n    editBoardName: title => setKanban({ ...kanban, title }),\r\n    addLane: newTitle => {\r\n      const updatedLanes = [\r\n        ...lanes,\r\n        { id: uuid(), title: newTitle, items: [] }\r\n      ];\r\n      updateLanes(updatedLanes);\r\n    },\r\n    removeLane: laneId => {\r\n      const updatedLanes = lanes.filter(lane => lane.id !== laneId);\r\n      updateLanes(updatedLanes);\r\n    },\r\n    editLane: (laneId, newAttribute) => {\r\n      const updatedLanes = lanes.map(lane =>\r\n        lane.id === laneId ? { ...lane, ...newAttribute } : lane\r\n      );\r\n      updateLanes(updatedLanes);\r\n    },\r\n    addItem: (laneId, itemName, itemDescription) => {\r\n      const newItem = {\r\n        id: uuid(),\r\n        name: itemName,\r\n        description: itemDescription\r\n      };\r\n      const updatedLanes = lanes.map(lane =>\r\n        lane.id === laneId ? { ...lane, items: [...lane.items, newItem] } : lane\r\n      );\r\n      updateLanes(updatedLanes);\r\n    },\r\n    editItem: (laneId, itemId, newAttribute) => {\r\n      const oldLane = lanes.find(lane => lane.id === laneId);\r\n      const oldItem = oldLane.items.find(item => item.id === itemId);\r\n      const newItem = { ...oldItem, ...newAttribute };\r\n      const filteredItems = oldLane.items.filter(item => item.id !== itemId);\r\n      const newItems = [...filteredItems, newItem];\r\n      const updatedLanes = lanes.map(lane => {\r\n        if (lane.id === laneId) {\r\n          return { ...oldLane, items: newItems };\r\n        }\r\n        return lane;\r\n      });\r\n      updateLanes(updatedLanes);\r\n    },\r\n    removeItem: (laneId, itemId) => {\r\n      const updatedLanes = lanes.map(lane => {\r\n        if (lane.id === laneId) {\r\n          return {\r\n            ...lane,\r\n            items: lane.items.filter(i => i.id !== itemId)\r\n          };\r\n        } else {\r\n          return lane;\r\n        }\r\n      });\r\n      updateLanes(updatedLanes);\r\n    },\r\n    moveItem: (laneId, itemId, newLaneId) => {\r\n      const itemToMove = lanes\r\n        .find(l => l.id === laneId)\r\n        .items.find(i => i.id === itemId);\r\n      const updatedLanes = lanes.map(lane => {\r\n        if (lane.id === newLaneId) {\r\n          const newItems = [...lane.items, itemToMove];\r\n          return { ...lane, items: newItems };\r\n        }\r\n        if (lane.id === laneId) {\r\n          return { ...lane, items: lane.items.filter(i => i.id !== itemId) };\r\n        }\r\n        return lane;\r\n      });\r\n      updateLanes(updatedLanes);\r\n    },\r\n    moveItemToPos: (sourceLaneId, destLaneId, destItemIndex, itemId) => {\r\n      const sourceColumn = lanes.find(lane => lane.id === sourceLaneId);\r\n      const sourceColumnIdx = lanes.findIndex(lane => lane.id === sourceLaneId);\r\n\r\n      const destinationColumn = lanes.find(lane => lane.id === destLaneId);\r\n      const destinationColumnIdx = lanes.findIndex(\r\n        lane => lane.id === destLaneId\r\n      );\r\n      const updatedLanes = lanes;\r\n      const movedItem = sourceColumn.items.find(item => item.id === itemId);\r\n\r\n      if (sourceLaneId === destLaneId) {\r\n        const destCol = {\r\n          ...destinationColumn,\r\n          items: destinationColumn.items.filter(i => i.id !== itemId)\r\n        };\r\n        const updatedLane = {\r\n          ...destCol,\r\n          items: [\r\n            ...destCol.items.slice(0, destItemIndex),\r\n            movedItem,\r\n            ...destCol.items.slice(destItemIndex)\r\n          ]\r\n        };\r\n        updatedLanes[destinationColumnIdx] = updatedLane;\r\n      } else {\r\n        const newSourceCol = {\r\n          ...sourceColumn,\r\n          items: sourceColumn.items.filter(item => item.id !== itemId)\r\n        };\r\n\r\n        const newDestCol = {\r\n          ...destinationColumn,\r\n          items: [\r\n            ...destinationColumn.items.slice(0, destItemIndex),\r\n            movedItem,\r\n            ...destinationColumn.items.slice(destItemIndex)\r\n          ]\r\n        };\r\n        updatedLanes[sourceColumnIdx] = newSourceCol;\r\n        updatedLanes[destinationColumnIdx] = newDestCol;\r\n      }\r\n\r\n      updateLanes(updatedLanes);\r\n    }\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./Board.css\";\r\nimport SwimLanes from \"./SwimLanes\";\r\nimport useBoardState from \"./hooks/useBoardState\";\r\nimport TitleForm from \"./TitleForm\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nexport default function Board() {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const {\r\n    kanban,\r\n    addLane,\r\n    addItem,\r\n    editItem,\r\n    removeItem,\r\n    removeLane,\r\n    editBoardName,\r\n    editLane,\r\n    moveItem,\r\n    moveItemToPos\r\n  } = useBoardState();\r\n  const { title, lanes } = kanban;\r\n  const toggleEdit = () => setIsEditing(!isEditing);\r\n  const onDragEnd = result => {\r\n    const { destination, source, draggableId } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    moveItemToPos(\r\n      source.droppableId,\r\n      destination.droppableId,\r\n      destination.index,\r\n      draggableId\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"Board\">\r\n      <div className=\"board-title\">\r\n        {isEditing ? (\r\n          <TitleForm\r\n            editTitle={editBoardName}\r\n            toggleEdit={toggleEdit}\r\n            title={title}\r\n          />\r\n        ) : (\r\n          <h1 onClick={toggleEdit}>{title}</h1>\r\n        )}\r\n      </div>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <SwimLanes\r\n          lanes={lanes}\r\n          addLane={addLane}\r\n          addItem={addItem}\r\n          editLane={editLane}\r\n          removeLane={removeLane}\r\n          editItem={editItem}\r\n          removeItem={removeItem}\r\n          moveItem={moveItem}\r\n        />\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./Navbar\";\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}